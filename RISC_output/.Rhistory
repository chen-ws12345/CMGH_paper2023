#exprs <- colMeans(mat[genes,],na.rm = T)
exprs <- colMeans(sub_mat[genes,],na.rm = T)
head(exprs)
#all(names(exprs) == colnames(mat)) # TRUE
all(names(exprs) == colnames(sub_mat))
meta <- sub_hep@meta.data
meta$avg_score <- unname(exprs)
head(meta)
scaled_score <- as.data.frame(scale(meta$avg_score))
meta$scaled_avg_score <- scaled_score$V1
head(meta)
my_comparisons3 = list(c("c0","c1"),c("c0","c2"),c("c0","c3"),
c("c1","c2"),c("c1","c3"),c("c1","c5"))
ggboxplot(meta,x="seurat_clusters",y="avg_score",size =  0.8, width = 0.6,outlier.shape=NA,color = "seurat_clusters", add = "jitter",add.params= list(size=0.3),legend="none",
order = c("c1","c0","c2","c5","c3"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons3, method= "t.test",size=2.3) +
labs(y = "avg_KEGG_Sulfur metabolismm")
genes <- kegg_pathways[['Steroid biosynthesis']]
genes
length(genes)
tmp <- human2mouse(genes)
tmp
input_genes <- tmp$mouseGene
######### SKIP ################################################
genes <- input_genes[which(input_genes %in% rownames(sub_mat))]
genes
#exprs <- colMeans(mat[genes,],na.rm = T)
exprs <- colMeans(sub_mat[genes,],na.rm = T)
head(exprs)
#all(names(exprs) == colnames(mat)) # TRUE
all(names(exprs) == colnames(sub_mat))
meta <- sub_hep@meta.data
meta$avg_score <- unname(exprs)
head(meta)
scaled_score <- as.data.frame(scale(meta$avg_score))
meta$scaled_avg_score <- scaled_score$V1
head(meta)
my_comparisons3 = list(c("c0","c1"),c("c0","c2"),c("c0","c3"),
c("c1","c2"),c("c1","c3"),c("c1","c5"))
ggboxplot(meta,x="seurat_clusters",y="avg_score",size =  0.8, width = 0.6,outlier.shape=NA,color = "seurat_clusters", add = "jitter",add.params= list(size=0.3),legend="none",
order = c("c1","c0","c2","c5","c3"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons3, method= "t.test",size=2.3) +
labs(y = "avg_KEGG_Steroid biosynthesis")
genes <- kegg_pathways[['D-Glutamine and D-glutamate metabolism']]
genes
length(genes)
tmp <- human2mouse(genes)
tmp
input_genes <- tmp$mouseGene
######### SKIP ################################################
genes <- input_genes[which(input_genes %in% rownames(sub_mat))]
genes
#exprs <- colMeans(mat[genes,],na.rm = T)
exprs <- colMeans(sub_mat[genes,],na.rm = T)
head(exprs)
#all(names(exprs) == colnames(mat)) # TRUE
all(names(exprs) == colnames(sub_mat))
meta <- sub_hep@meta.data
meta$avg_score <- unname(exprs)
head(meta)
scaled_score <- as.data.frame(scale(meta$avg_score))
meta$scaled_avg_score <- scaled_score$V1
head(meta)
my_comparisons3 = list(c("c0","c1"),c("c0","c2"),c("c0","c3"),
c("c1","c2"),c("c1","c3"),c("c1","c5"))
ggboxplot(meta,x="seurat_clusters",y="avg_score",size =  0.8, width = 0.6,outlier.shape=NA,color = "seurat_clusters", add = "jitter",add.params= list(size=0.3),legend="none",
order = c("c1","c0","c2","c5","c3"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons3, method= "t.test",size=2.3) +
labs(y = "avg_KEGG_D-Glutamine and D-glutamate metabolism")
gene = c('Mki67','Top2a','Ccnb1','Foxm1','Ccna2','Cenpm','Cdk1',
'Prc1','Cdca8','Plk1')
DotPlot(sub_hep, features = gene)
gene = c('Axin2','Tbx3','Yap1','Sox9','Afp',
'Lgr5','Igf2bp3','Tnfrsf12a')
DotPlot(sub_hep, features = gene)
gene = c('Mat1a','Slc7a11')
DotPlot(sub_hep, features = gene)
mouseSyno('Slc7a11')
gene = c('xCT')
DotPlot(sub_hep, features = gene)
gene = c('Mcl1')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Hnf4a')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Snai1')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Hgf','Met','Egfr1')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Hgf','Met','Egfr')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Alb')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Saa2')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Ccn2')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Mcp1')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
gene = c('Cyr61')
#mouseSyno('Slc7a11')
DotPlot(sub_hep, features = gene)
install.packages("devtools")
devtools::install_github("JhuangLab/CytoTree")
setwd("/Volumes/My_Passport/SMO_scData_analysis/SMO_0hr/RISC_output")
library(RColorBrewer)
library(SingleCellExperiment)
library(Matrix)
library(Seurat)
library(tidyverse)
library(homologene)
library('ggplot2')
library('gplots')
library('dplyr')
library('ggpubr')
hep <- readRDS("../savedRDS/hep01235_Luc+Cre_seuratfromsce.rds")
hep
gene = c('Igf1','Igf2','Igfbp1','Igfbp7','Igfbp6')
gene = c('Igf1','Igfr1','Igf2','Igfbp1','Igfbp7','Igfbp6')
#mouseSyno('Slc7a11')
DotPlot(hep, features = gene)
#mouseSyno('Slc7a11')
DotPlot(hep, features = gene, group.by = "new_label")
mouseSyno('Igfr1')
library(geneSynonym)
mouseSyno('Igfr1')
gene = c('Igf1','Igf1r','Igf2','Igfbp1','Igfbp7','Igfbp6')
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Igf1r','Igf2','Igfbp1','Igfbp7','Igfbp6')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Igfbp6')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Igf1r','Igf2','Igfbp1','Igfbp7','Igfbp6')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Igf1r')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Hmgcr','Acas')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Hmgcr','Aacs')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Acly')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Acly','Acat1')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Acly','Acat1','Acat1b')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Acly','Acat1','Hmgcs2','Ldlrp1','Pcsk9')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Acly','Acat1','Hmgcs2','Ldlr','Pcsk9')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Acly','Acat1','Hmgcs2','Ldlr','Pcsk9',
'Acat2')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Cps1')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Cps1','Odc')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Cps1','Odc1')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Cps1','Odc1','Arg1')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Ihh','Shh','Dhh')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Igf1r','Igf2','Igfbp1','Igfbp7','Igfbp6')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Tgfbr1','Tgfb1')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Tgfbr1','Tgfb1','Dgat1','Dgat2')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c("Apoe",'Apoa1')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c("Scd1")
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c("Scd1",'Fsn')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c("Scd1",'Fasn')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c("Scd1",'Fasn','Ppara')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c("Scd1",'Fasn','Ppara','Pparr')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c("Scd1",'Fasn','Ppara','Pparg')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Pparg')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Ppara')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Tram')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Tfam')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
gene = c('Pgc1a')
# 'Igf1',
#library(geneSynonym)
#mouseSyno('Igfr1')
DotPlot(hep, features = gene, group.by = "new_label")
# Read in sample information / metaData generated by Ricardo
meta <- readRDS("/Volumes/My_Passport/TC_analysis/DYNASTY_project/sampleInfo_20200414.rds")
dim(meta) # [1] 368 245
meta[1:3,1:3]
meta_tmp <- meta[,c("Sample_Number","sampleId","Group","Severity")]
head(meta_tmp)
meta_tmp <- as.data.frame(meta_tmp)
rownames(meta_tmp) <- meta_tmp[,"sampleId"]
table(meta_tmp$Severity)
table(meta_tmp$Group)
BiocManager::install("veloviz")
remotes::install_github('JEFworks-Lab/veloviz')
devtools::install_github('shenorrlab/bseqsc')
remove.packages("csSAM")
devtools::install_github('shenorrlab/bseqsc')
devtools::install_github('shenorrlab/bseq-sc')
devtools::install_github('shenorrlab/bseq-sc')
library(ggplot2)
library('gplots')
library('dplyr')
library('ggpubr')
library(tidyverse)
data <- read.table("/Volumes/My_Passport/SMO_scData_analysis/SMO_0hr/Music/results.txt",
sep = "\t",header = T, row.names = 1)
head(data)
dim(data) # [1] 368  15
# Read in sample information / metaData generated by Ricardo
meta <- readRDS("/Volumes/My_Passport/TC_analysis/DYNASTY_project/sampleInfo_20200414.rds")
dim(meta) # [1] 368 245
meta[1:3,1:3]
meta_tmp <- meta[,c("Sample_Number","sampleId","Group","Severity")]
head(meta_tmp)
table(meta_tmp$Severity)
table(meta_tmp$Group)
meta_tmp <- as.data.frame(meta_tmp)
rownames(meta_tmp) <- meta_tmp[,"sampleId"]
head(meta_tmp)
idx <- intersect(rownames(data),rownames(meta_tmp))
length(idx) # 368
data <- data[idx,]
meta_tmp <- meta_tmp[idx,]
all(rownames(data) == rownames(meta_tmp))  # TRUE
my_comparisons1 = list(c("Control","F0F1"),c("Control","F2"),
c("F0F1","F2"),c("F2","F3F4"))
meta_tmp <- cbind(meta_tmp, data[,3:15])
head(meta_tmp)
ggboxplot(meta_tmp,x="Severity",y="Hep1_1",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="Hep1_3",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="Hep2",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="Hep3",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="Hep4",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="Hep5",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="NonHep1",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="NonHep2",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="NonHep3",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="NonHep4",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="Hep3",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="Hep2",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
ggboxplot(meta_tmp,x="Severity",y="Hep3",size =  0.4, width = 0.5,outlier.shape=NA,color = "Severity", add = "jitter",add.params= list(size=0.8),legend="none",
order = c("Control","F0F1","F2","F3F4"))+ theme(axis.text.x=element_text(angle=30,size=8,vjust=1,hjust=1))+
stat_compare_means(comparisons = my_comparisons1, method= "t.test",size=2.3) +
labs(x = "Fibrosis Stages",
y = "proportion")
library(RColorBrewer)
library(SingleCellExperiment)
library(Matrix)
library(Seurat)
install.packages('Seurat')
install.packages('Seurat')
library(Seurat)
install.packages("glue")
library(Seurat)
install.packages("digest")
library(Seurat)
install.packages("stringi")
library(Seurat)
library(tidyverse)
install.packages("readr")
library(tidyverse)
install.packages("fs")
library(tidyverse)
install.packages("xml2")
library(tidyverse)
library(homologene)
library('ggplot2')
library('gplots')
library('dplyr')
library('ggpubr')
BiocManager::install("SingleCellExperiment")
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
BiocManager::install("SingleCellExperiment")
install.packages("devtools")
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/monocle3')
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
library(SingleCellExperiment)
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
library(RColorBrewer)
library(SingleCellExperiment)
library(Matrix)
library(Seurat)
install.packages("irlba")
library(Seurat)
library(tidyverse)
library(homologene)
library('ggplot2')
library('gplots')
library('dplyr')
library('ggpubr')
devtools::install_github("saeyslab/nichenetr")
library(nichenetr)
install_github("https://github.com/bioinfoDZ/RISC.git")
devtools::install_github("https://github.com/bioinfoDZ/RISC.git")
setwd("/Volumes/My_Passport/SMO_scData_analysis/SMO_48hr_PHX/RISC_output")
library(RColorBrewer)
library(SingleCellExperiment)
library(Matrix)
library(Seurat)
library(tidyverse)
seuratfromsce <- readRDS("./savedRDS/Luc+Cre_hepOnly_seuratfromsce.rds")
seuratfromsce <- readRDS("../savedRDS/Luc+Cre_hepOnly_seuratfromsce.rds")
seuratfromsce
head(seuratfromsce@meta.data)
table(seuratfromsce@meta.data$seurat_clusters)
### Find Markers ####################
hep <- SetIdent(seuratfromsce, value = "condition")
table(hep@meta.data$condition)
cluster.markers <- FindMarkers(hep, ident.1 = c('Luc_48hr_PHX'), ident.2 = c('Cre_48hr_PHX'),
min.cells.group = 1,
min.cells.feature = 1,
min.pct = 0,
logfc.threshold = 0, #log(2),
only.pos = FALSE)
head(cluster.markers, n = 5)
tail(cluster.markers)
dim(cluster.markers) # [1] 12913    5
# order list, pull out gene name and log2fc, and convert genes to uppercase
ranked_list <- cluster.markers[order(cluster.markers$avg_log2FC, decreasing = T),]
ranked_list$Gene.name <- str_to_upper(rownames(ranked_list))
head(ranked_list)
ranked_list <- ranked_list[,c("Gene.name", "avg_log2FC")]
rownames(ranked_list) <- NULL
head(ranked_list)
dim(cluster.markers) # [1] 12913    5
write.table(ranked_list, file = "/Users/tianyichen/Desktop/SMO_0hr/RISC_to_sce_to_seurat/gsea_analysis/hep_48hr_PHX_Luc_vs_Cre_gsea_13212.rnk", sep = "\t", row.names = F, quote = F)
write.table(ranked_list, file = "../gsea/hep_48hr_PHX_Luc_vs_Cre_gsea_13212.rnk", sep = "\t", row.names = F, quote = F)
